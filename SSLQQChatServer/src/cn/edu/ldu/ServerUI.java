package cn.edu.ldu;

import java.awt.Color;
import java.io.InputStream;
import java.net.DatagramSocket;
import java.security.KeyStore;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLServerSocket;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.TrustManagerFactory;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;

/**
 * 功能：服务器界面类
 * 作者：董相志，版权所有2016--2018，upsunny2008@163.com
 */
public class ServerUI extends javax.swing.JFrame {

    /**
     * Creates new form ServerUI
     */
    public ServerUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtHostName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtHostPort = new javax.swing.JTextField();
        btnStart = new javax.swing.JButton();
        midPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("聊天室服务器");

        topPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "启动服务器", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 14))); // NOI18N

        jLabel1.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel1.setText("主机名：");

        txtHostName.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        txtHostName.setText("127.0.0.1");

        jLabel2.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jLabel2.setText("端口：");

        txtHostPort.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        txtHostPort.setText("50000");

        btnStart.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        btnStart.setText("启  动");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHostName, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHostPort, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(btnStart)
                .addContainerGap())
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtHostName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtHostPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStart))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        midPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "聊天室大厅", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 14))); // NOI18N

        txtPane.setFont(new java.awt.Font("宋体", 1, 14)); // NOI18N
        jScrollPane1.setViewportView(txtPane);

        javax.swing.GroupLayout midPanelLayout = new javax.swing.GroupLayout(midPanel);
        midPanel.setLayout(midPanelLayout);
        midPanelLayout.setHorizontalGroup(
            midPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        midPanelLayout.setVerticalGroup(
            midPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, midPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(midPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(midPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //启动服务器
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        try {
            //获取服务器工作地址端口
            String hostName=txtHostName.getText();            
            int hostPort=Integer.parseInt(txtHostPort.getText());

            //创建UDP数据报套接字,在指定端口侦听
            DatagramSocket serverSocket=new DatagramSocket(hostPort);
            //设置消息窗口
            SimpleAttributeSet attr=new SimpleAttributeSet();
            StyleConstants.setForeground(attr, Color.red);
            Document doc=txtPane.getDocument(); //消息文档
            doc.insertString(doc.getLength(), "服务器开始侦听...\n", attr);
            
            //创建并启动UDP消息接收线程
            Thread recvThread=new ReceiveMessage(serverSocket,this);
            recvThread.start();
            
            //创建并启动文件接收线程
            new Thread(new Runnable() {
                public void run() {
                    try {
                    //获取客户机证书库
                    InputStream key =ServerUI.class.getResourceAsStream("/cn/edu/ldu/keystore/server.keystore");//证库库流
                    InputStream tkey =ServerUI.class.getResourceAsStream("/cn/edu/ldu/keystore/tserver.keystore");//证库库流
                    String SERVER_KEY_STORE_PASSWORD = "123456"; //server.keystore密码
                    String SERVER_TRUST_KEY_STORE_PASSWORD = "123456";//tserver.keystore密码

                    SSLContext ctx = SSLContext.getInstance("SSL");//SSL上下文
                    KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509");
                    TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
                    KeyStore ks = KeyStore.getInstance("JKS");
                    KeyStore tks = KeyStore.getInstance("JKS");
                    ks.load(key, SERVER_KEY_STORE_PASSWORD.toCharArray());//加载证书库
                    tks.load(tkey, SERVER_TRUST_KEY_STORE_PASSWORD.toCharArray());//加载证书库
                    kmf.init(ks, SERVER_KEY_STORE_PASSWORD.toCharArray());
                    tmf.init(tks);
                    ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);
                    //服务器侦听安全连接
                    SSLServerSocket sslListenSocket = (SSLServerSocket) ctx.getServerSocketFactory().createServerSocket(hostPort); //安全连接侦听套接字     
                    int processors=Runtime.getRuntime().availableProcessors();//CPU数
                    ExecutorService fixedPool=Executors.newFixedThreadPool(processors*2);//创建固定大小线程池     
                    while (true) { //处理所有客户机连接
                        SSLSocket toClientSocket=(SSLSocket)sslListenSocket.accept();//如果无连接，则阻塞，否则接受连接并创建新的会话套接字
                        //文件接收线程为SwingWorker类型的后台工作线程
                        SwingWorker<Integer,Object> recver=new RecvFile(toClientSocket,doc,tks,ks); //创建客户线程
                        fixedPool.execute(recver); //用线程池调度客户线程运行
                    }//end while 
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage(), "错误提示", JOptionPane.ERROR_MESSAGE);
                    }//end try catch            
                }//end run()
            }).start();             
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "错误提示", JOptionPane.ERROR_MESSAGE);
        }
        btnStart.setEnabled(false);
    }//GEN-LAST:event_btnStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel midPanel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JTextField txtHostName;
    private javax.swing.JTextField txtHostPort;
    public javax.swing.JTextPane txtPane;
    // End of variables declaration//GEN-END:variables
}
